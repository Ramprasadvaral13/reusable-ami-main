pipeline {
    agent any

    environment {
        WORKSPACE = 'ansible-project'
        AWS_PROFILE = 'pro' // Your AWS profile (SSO or otherwise)
        AWS_REGION = 'us-east-1'
        INVENTORY_PATH = "${WORKSPACE}/inventory/aws_ec2.yml"
        PATCH_PLAYBOOK = "${WORKSPACE}/patch.yml"
        DOCKER_PLAYBOOK = "${WORKSPACE}/docker.yml"
    }

    stages {
        stage('Debug: Show Jenkins Env, AWS Config') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh '''
                        echo "### WHOAMI"
                        whoami
                        echo "### ENV"
                        env
                        echo "### HOME and .aws config"
                        ls -l $HOME
                        ls -l $HOME/.aws || true
                        cat $HOME/.aws/config || true
                    '''
                }
            }
        }
        stage('Validate AWS Auth/Profile') {
            steps {
                dir("${env.WORKSPACE}") {
                    // This fails the build early if AWS is misconfigured
                    sh "aws sts get-caller-identity --profile ${env.AWS_PROFILE}"
                }
            }
        }
        stage('Check Ansible Inventory') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-inventory -i ${env.INVENTORY_PATH} --graph"
                }
            }
        }
        stage('Run Patch Playbook') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-playbook -i ${env.INVENTORY_PATH} ${env.PATCH_PLAYBOOK} -vvv"
                }
            }
        }
        stage('Install Docker') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-playbook -i ${env.INVENTORY_PATH} ${env.DOCKER_PLAYBOOK} -vvv"
                }
            }
        }
        stage('Verify Docker Installation') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible -i ${env.INVENTORY_PATH} env__dev -m command -a 'docker --version' -b"
                }
            }
        }
    }

    post {
        success {
            echo 'Jenkins pipeline for Ansible automation finished successfully.'
        }
        failure {
            echo 'Pipeline failed! See the logs from early stages for user, env, and auth debugging.'
        }
        always {
            dir("${env.WORKSPACE}") {
                archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
            }
        }
    }
}

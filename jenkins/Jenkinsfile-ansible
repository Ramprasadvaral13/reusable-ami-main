pipeline {
    agent any

    environment {
        WORKSPACE = 'ansible-project'                   // path to your ansible folder in repo
        AWS_PROFILE = 'pro'                             // AWS CLI profile with credentials
        AWS_REGION = 'us-east-1'
        INVENTORY_PATH = "${WORKSPACE}/inventory/aws_ec2.yml"
        PATCH_PLAYBOOK = "${WORKSPACE}/patch.yml"
        DOCKER_PLAYBOOK = "${WORKSPACE}/docker.yml"
    }

    stages {
        stage('Debug Environment & Credentials') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh '''
                        echo "Current User: $(whoami)"
                        echo "Environment Variables:"
                        env
                        echo "Checking .aws config and credentials directory:"
                        ls -l $HOME/.aws || true
                        cat $HOME/.aws/config || true
                        cat $HOME/.aws/credentials || true
                    '''
                }
            }
        }

        stage('Validate AWS Auth') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "aws sts get-caller-identity --profile ${env.AWS_PROFILE}"
                }
            }
        }

        stage('Check Ansible Inventory') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-inventory -i ${env.INVENTORY_PATH} --graph"
                }
            }
        }

        stage('Run Patch Playbook') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-playbook -i ${env.INVENTORY_PATH} ${env.PATCH_PLAYBOOK} -vvv"
                }
            }
        }

        stage('Run Docker Installation') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible-playbook -i ${env.INVENTORY_PATH} ${env.DOCKER_PLAYBOOK} -vvv"
                }
            }
        }

        stage('Verify Docker Installation') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh "ansible -i ${env.INVENTORY_PATH} env__dev -m command -a 'docker --version' -b"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
        always {
            dir("${env.WORKSPACE}") {
                archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
            }
        }
    }
}

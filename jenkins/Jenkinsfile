pipeline {
  agent any

  parameters {
    choice(
      name: 'TERRAFORM_ACTION',
      choices: ['apply', 'destroy'],
      description: 'Select Terraform action: apply to provision, destroy to tear down'
    )
  }

  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
    // Uncomment these if you manage AWS creds in Jenkins Credentials
    // AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
    // AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Packer Build & Store AMI ID') {
      steps {
        dir('packer') {
          sh 'packer init ubuntu-golden-ami.pkr.hcl'
          sh './script/build_golden-ami.sh'
          archiveArtifacts artifacts: 'manifest.json', fingerprint: true
        }
      }
    }

    stage('Terraform Prepare') {
      steps {
        dir('terraform/environments/dev') {
          sh 'rm -rf .terraform'
          sh 'terraform init'
          
        }
      }
    }

    stage('Terraform Plan') {
      when {
        expression { params.TERRAFORM_ACTION == 'apply' }
      }
      steps {
        dir('terraform/environments/dev') {
          sh 'terraform plan -out=tfplan'
          archiveArtifacts artifacts: 'tfplan', allowEmptyArchive: true
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        dir('terraform/environments/dev') {
          script {
            if (params.TERRAFORM_ACTION == 'apply') {
              sh 'terraform apply -auto-approve tfplan'
            } else if (params.TERRAFORM_ACTION == 'destroy') {
              input message: 'Are you sure you want to destroy ALL resources?'
              sh 'terraform destroy -auto-approve'
            }
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: '**/*.tfstate*', allowEmptyArchive: true
      sh 'rm -f tfplan || true'
      cleanWs()
    }
    failure {
      mail to: 'your-team@example.com',
           subject: "Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
           body: "Check Jenkins for details: ${env.BUILD_URL}"
    }
  }
}

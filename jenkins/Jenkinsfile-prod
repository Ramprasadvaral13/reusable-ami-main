pipeline {
  agent any
  
  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
  }

  parameters {
    choice(
      name: 'TERRAFORM_ACTION',
      choices: ['apply', 'destroy'],
      description: 'Select Terraform action: apply to provision, destroy to tear down'
    )
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Terraform Prepare') {
      steps {
        dir('terraform/environments/prod') {
          // Remove old terraform cache and reinitialize
          sh 'rm -rf .terraform'
          sh 'terraform init'
          // Optional: sync state with remote backend
          sh 'terraform refresh'
        }
      }
    }

    stage('Terraform Plan') {
      when {
        expression { params.TERRAFORM_ACTION == 'apply' }
      }
      steps {
        dir('terraform/environments/prod') {
          sh 'terraform plan -out=tfplan'
          archiveArtifacts artifacts: 'tfplan', allowEmptyArchive: true
        }
      }
    }

    stage('Terraform Apply/Destroy') {
      steps {
        dir('terraform/environments/prod') {
          script {
            if (params.TERRAFORM_ACTION == 'apply') {
              sh 'terraform apply -auto-approve tfplan'
            } else if (params.TERRAFORM_ACTION == 'destroy') {
              sh 'terraform destroy -auto-approve'
            }
          }
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/*.tfstate*', allowEmptyArchive: true
      sh 'rm -f tfplan || true'
      cleanWs()
    }
    failure {
      mail to: 'your-team@example.com',
           subject: "Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
           body: "Check Jenkins for details: ${env.BUILD_URL}"
    }
  }
}

